; ----------------------------------------------------------
; TagsController (no prefixed route, no plugin)
; ----------------------------------------------------------
[Tags]
index = user, undefined-role
edit = user
delete = admin
very_long_underscored_action = user
veryLongActionNameAction = user
; ----------------------------------------------------------
; TagsController (/admin prefixed route, no plugin)
; ----------------------------------------------------------
[admin/Tags]
index = user, undefined-role
edit = user
delete = admin
very_long_underscored_action = user
veryLongActionNameAction = user
; ----------------------------------------------------------
; TagsController (plugin Tags, no prefixed route)
; ----------------------------------------------------------
[Tags.Tags]
index = user
edit,view = user
delete = admin
very_long_underscored_action = user
veryLongActionNameAction = user
; ----------------------------------------------------------
; TagsController (plugin Tags, /admin prefixed route)
; ----------------------------------------------------------
[Tags.admin/Tags]
index = user
view, edit = user
delete = admin
very_long_underscored_action = user
veryLongActionNameAction = user
; ----------------------------------------------------------
; CommentsController, used for testing 'allowLoggedIn' access to
; non-admin-prefixed routes.
; ----------------------------------------------------------
[special/Comments]
* = admin
[Comments.special/Comments]
* = admin
; ----------------------------------------------------------
; PostsController, used for testing generic wildcard access
; ----------------------------------------------------------
[Posts]
*=*
[admin/Posts]
* = *
[Posts.Posts]
* = *
[Posts.admin/Posts]
* = *
; ----------------------------------------------------------
; BlogsController, used for testing specific wildcard access
; ----------------------------------------------------------
[Blogs]
*= user,moderator
foo = "!user"
[admin/Blogs]
* = moderator
[Blogs.Blogs]
* = moderator
[Blogs.admin/Blogs]
* = moderator

; ----------------------------------------------------------
; MyTestController, used for testing nested prefixes
; ----------------------------------------------------------
[admin/my_prefix/MyTest]
myModerator = moderator
myAll = *
myDenied = "!moderator",admin
